% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/numquad_vm.r
\name{numquad_vm}
\alias{numquad_vm}
\title{Quadrature of product of vector and matrix}
\usage{
numquad_vm(v, m, h, quadrature = c("trapez", "simpson"))
}
\arguments{
\item{v}{numeric vector.}

\item{m}{numeric matrix.}

\item{h}{single number specifying sub-interval size.}

\item{quadrature}{character specifying whether to use the trapezoidal rule
(\code{quadrature} = "trapezoidal") or the extended Simpson rule
(\code{quadrature} = "simpson") all in lower case letters.}
}
\value{
numeric vector with the numerical estimation of the quadrature.
}
\description{
Quadrature of product of vector and matrix
}
\details{
\code{numquad_vm} computes the numerical quadrature of the product between
a vector \code{v} and a matrix \code{m}.

\code{numquad_vm} first uses matrix multiplication between vector \code{v}
and matrix \code{m} for a fast estimation of the integral. Then, a correction
for the two extremes of the integration interval is performed depending on
the type of numerical quadrature that has been selected.
}
\examples{
# Use lower numbers for nv and nc if computing power/RAM is an issue for you.
nv <- 5000
nc <- 100
v <- seq(1, 10, length = nv)
m <- matrix(runif(nv*nc), nv, nc)
h <- .1
x <- numquad_vm(v, m, nv, h)
y <- sapply(1:nc, function(i) MiscMath::quad_trapez(v*m[,i], h))
print(mad(x-y))

# Just how much faster than quad_trapez is it?
niter <- 1000
t1 <- system.time(replicate(niter, x <- numquad_vm(v, m, nv, h)))
t2 <- system.time(replicate(niter, y <- sapply(1:nc, function(i) MiscMath::quad_trapez(v*m[,i], h))))

print(t2/t1)
print(sum(t2,na.rm=T)/sum(t1,na.rm=T))

}
